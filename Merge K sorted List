/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        if (lists == null || lists.size() == 0) {
            return null;
        }
        
        PriorityQueue<ListNode> queue = new PriorityQueue<ListNode> (lists.size(), 
                        new Comparator<ListNode>() {
                            public int compare(ListNode a, ListNode b) {
                                if (a.val > b.val) {
                                    return 1;
                                }
                                else if (a.val == b.val) {
                                    return 0;
                                }
                                else {
                                    return -1;
                                }
                            }                
                        });
        
        for (ListNode node : lists) {
            if (node != null) {
                queue.offer(node);
            }
        }   
        
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;
        
        while (!queue.isEmpty()) {
            ListNode temp = queue.poll();
            cur.next = temp;
            cur = cur.next;
            
            if (temp.next != null) {
                queue.offer(temp.next);
            }
            
        }
        
        return dummy.next;
    }
}
